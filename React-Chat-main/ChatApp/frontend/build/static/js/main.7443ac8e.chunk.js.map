{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","userName","parseInt","Math","random","App","useState","message","setMessage","chat","setChat","useEffect","on","payload","className","onSubmit","e","preventDefault","console","log","emit","type","name","placeholder","value","onChange","target","required","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGMA,EAASC,YAAG,yBACZC,EAAW,QAAUC,SAAyB,GAAhBC,KAAKC,UA4C1BC,MA3Cf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KAgBb,OAZAC,qBAAU,WACRZ,EAAOa,GAAG,WAAW,SAACC,GACpBH,EAAQ,GAAD,mBAAKD,GAAL,CAAWI,WAWpB,sBAAKC,UAAU,MAAf,UACE,iDACA,uBAAMC,SATU,SAACC,GACnBA,EAAEC,iBACFC,QAAQC,IAAIZ,GACZR,EAAOqB,KAAK,UAAW,CAAEnB,WAAUM,YACnCC,EAAW,KAKT,UACE,uBACEa,KAAK,OACLC,KAAK,UACLC,YAAY,eACZC,MAAOjB,EACPkB,SAAU,SAACT,GACTR,EAAWQ,EAAEU,OAAOF,QAEtBG,UAAQ,IAEV,wBAAQN,KAAK,SAAb,qBAEDZ,EAAKmB,KAAI,SAACf,EAASgB,GAClB,OACE,+BACGhB,EAAQZ,SADX,KACsB,+BAAOY,EAAQN,YAD5BsB,UC3BJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7443ac8e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:3000\");\nconst userName = \"User \" + parseInt(Math.random() * 10);\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([]);\n\n  useEffect(() => {\n    socket.on(\"message\", (payload) => {\n      setChat([...chat, payload]);\n    });\n  });\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    console.log(message);\n    socket.emit(\"message\", { userName, message });\n    setMessage(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <h1>Romain chat app</h1>\n      <form onSubmit={sendMessage}>\n        <input\n          type=\"text\"\n          name=\"message\"\n          placeholder=\"Type message\"\n          value={message}\n          onChange={(e) => {\n            setMessage(e.target.value);\n          }}\n          required\n        ></input>\n        <button type=\"submit\">Send</button>\n      </form>\n      {chat.map((payload, index) => {\n        return (\n          <h3 key={index}>\n            {payload.userName}: <span>{payload.message}</span>\n          </h3>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}